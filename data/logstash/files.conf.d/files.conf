input {
    rabbitmq {
	host => "localhost"
	queue => "files-queue"
	exchange => "files-ex"
	key => "files-key"
	exclusive => false
	durable => true
	auto_delete => false
	type => "files"
	user => "user"
	password => "password"
    }
}

filter {

    if [MD5] {
        
	#replace username on %username% in file pathes, exclude public user profile
        if [event_data][Image] {
             mutate {
                gsub => [
                    "[event_data][Image]", "(?i)[\\]users[\\](?!public).*?([\\])", "\users\%username%\1",
                    "[event_data][Image]", "(?i)[\\]documents and settings[\\].*?([\\])", "\documents and settings\%username%\1"
                ]
            }
        }
        if [ImagePath] {
             mutate {
                gsub => [
                    "ImagePath", "(?i)[\\]users[\\](?!public).*?([\\])", "\users\%username%\1",
                    "ImagePath", "(?i)[\\]documents and settings[\\].*?([\\])", "\documents and settings\%username%\1"
                ]
            }
        }
        if [event_data][ImageLoaded] {
             mutate {
                gsub => [
                    "[event_data][ImageLoaded]", "(?i)[\\]users[\\](?!public).*?([\\])", "\users\%username%\1",
                    "[event_data][ImageLoaded]", "(?i)[\\]documents and settings[\\].*?([\\])", "\documents and settings\%username%\1"
                ]
            }
        }
	if [event_data][ParentImage] {
             mutate {
                gsub => [
                    "[event_data][ParentImage]", "(?i)[\\]users[\\](?!public).*?([\\])", "\users\%username%\1",
                    "[event_data][ParentImage]", "(?i)[\\]documents and settings[\\].*?([\\])", "\documents and settings\%username%\1"
                ]
            }
        }
        if [eventtype] == 'Autorun' {
            mutate {
                add_tag => ["founded_in_autorun"]
		gsub => [
		    "Signer", "\(Verified\) ", "",
		    "Signer", "\(Not verified\) ", ""
		]
            }

	    #replace username on %username% for Entrys in Startup folder of user profile, e.g. C:\Users\Admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
	    if [Category] == 'Logon' {
		mutate {
            	    gsub => [
                	"EntryLocation", "(?i)[\\]users[\\](?!public).*?([\\])", "\users\%username%\1",
                	"EntryLocation", "(?i)[\\]documents and settings[\\].*?([\\])", "\documents and settings\%username%\1"
            	    ]
        	}

	    }
        }
        else if [eventtype] == 'DriverLoad' {
            mutate {
                add_tag => ["installed_as_driver"]
            }
        }
	else if [eventtype] == 'ProcessCreate' {
            mutate {
                add_tag => ["executed"]
            }
        }
        else if [eventtype] == 'Mail' {
            mutate {
                add_tag => ["sended_as_attachment"]
            }
        }
        else if [eventtype] ==  'Web' {
            mutate {
                add_tag => ["downloaded_from_web"]
            }
        }

        #Aggregate block
        aggregate {
            task_id => "%{MD5}"
            code => "
                map['type'] ||=  'files'
                map['@timestamp'] ||= event['@timestamp'] #date
		map['first_seen'] ||= event['@timestamp'] #date
                map['MD5'] ||= event['MD5'] #string

                #Updated fields
		#map['product_name'] ||= ''
                #map['vendor_name'] ||= ''
		map['mime_type'] ||= ''
		map['file_type'] ||= ''
                map['computers'] ||= []
		map['users'] ||= []
                map['tags'] ||= ['aggregated'] #array
                map['eventtypes'] ||= [] #array
                map['file_signer'] ||= '' #string
                map['file_size'] ||= 0 #number
                map['execution_count'] ||= 0 #number
		map['processed_events'] ||= 0
                map['file_pathes'] ||= [] #array
                map['file_starters'] ||= [] #array
                map['mail_senders'] ||= [] #array
		map['mail_recipients'] ||= [] #array
		map['mail_subjects'] ||= [] #array
		map['mail_attachments'] ||= [] #array
		map['autorun_entrys'] ||= [] #array
		map['yara_matches'] ||= [] #array
		map['yara_check_date'] ||= ''
		#map['connected_hosts'] ||= [] #TODO, use Sysmon network connect events
		#map['file_downloadurls'] ||= [] #TODO, use Bro file extractor
		
		map['processed_events'] += 1
		map['last_seen'] = event['@timestamp'] #date
		map['file_type'] = event['file_type'] if event['type'] == 'mail' && !event['file_type'].to_s.empty?
		map['mime_type'] = event['mime_type'] if event['type'] == 'mail' && !event['mime_type'].to_s.empty?
                map['computers'] |= [event['computer_name']] if (event['type'] == 'wineventlog' || event['type'] == 'autoruns') && !event['computer_name'].to_s.empty?
		map['users'] |= [event['event_data']['User']] if event['type'] == 'wineventlog' && !event['event_data']['User'].to_s.empty?
                map['eventtypes'] |= [event['eventtype']] #eventtype is not array, so we put it in []. Eventtype always have value, so we don't check it on null or empty string
                map['tags'] |= event['tags'] unless event['tags'].nil? || event['tags'].empty? #tags is array. It can be null or empty, so we check it befor add to map['tags']
                map['file_size'] = event['file_size'] if event['type'] == 'mail' && event['file_size'] != 0 && event['file_size'] != map['file_size']
		map['file_signer'] = event['event_data']['Signature'] if (event['eventtype'] == 'ImageLoad' || event['eventtype'] == 'DriverLoad') && !event['event_data']['Signature'].to_s.empty?
		map['file_signer'] = event['Signer'] if event['eventtype'] == 'autoruns' && !event['Signer'].to_s.empty?
		map['execution_count'] += 1 if event['eventtype'] == 'ProcessCreate' || event['eventtype'] == 'ImageLoad' || event['eventtype'] == 'DriverLoad'
                map['file_pathes'] |= [event['ImagePath']] if event['type'] == 'autoruns' && !event['ImagePath'].to_s.empty?
		map['file_pathes'] |= [event['event_data']['ImageLoaded']] if event['type'] == 'wineventlog' && (event['eventtype'] == 'ImageLoad' || event['eventtype'] == 'DriverLoad') && !event['event_data']['ImageLoaded'].to_s.empty?
		map['file_pathes'] |= [event['event_data']['Image']] if event['type'] == 'wineventlog' && event['eventtype'] == 'ProcessCreate' && !event['event_data']['Image'].to_s.empty?
                map['file_starters'] |= [event['event_data']['ParentImage']] if event['type'] == 'wineventlog' && event['eventtype'] == 'ProcessCreate' && !event['event_data']['ParentImage'].to_s.empty?
                map['file_starters'] |= [event['event_data']['Image']] if event['type'] == 'wineventlog' && (event['eventtype'] == 'ImageLoad' || event['eventtype'] == 'DriverLoad') && !event['event_data']['Image'].to_s.empty?
                map['mail_senders'] |= [event['from']] if event['type'] == 'mail' && !event['from'].to_s.empty? #from field is not array, it is string, so we put it in []
		map['mail_recipients'] |= event['to'] if event['type'] == 'mail' && !event['to'].to_s.empty?
		map['mail_recipients'] |= event['cc'] if event['type'] == 'mail' && !event['cc'].to_s.empty?
		map['mail_subjects'] |= [event['subject']] if event['type'] == 'mail' && !event['subject'].to_s.empty? #subject field is not array, it is string, so we put it in []
		map['mail_attachments'] |= [event['file_name']] if event['type'] == 'mail' && !event['file_name'].to_s.empty? #file_name field is not array, it is string, so we put it in []
		map['autorun_entrys'] |= [event['EntryLocation'] + '\\' + event['Entry']] if event['type'] == 'autoruns' && !event['Entry'].to_s.empty? && !event['EntryLocation'].to_s.empty?
		map['yara_matches'] |= event['yara_matches'] if event['type'] == 'mail' && !event['yara_matches'].nil? && !event['yara_matches'].empty?
		map['yara_check_date'] = event['yara_check_date'] if event['type'] == 'mail' && !event['yara_check_date'].to_s.empty?
            "
            push_map_as_event_on_timeout => true
            timeout => 5
            map_action => "create_or_update"
        }

    }
    if "aggregated" not in [tags] {
        drop {}
    }
    else {
        mutate {
            remove_tag => ["aggregated"]
        }
	translate {
            field => "MD5"
            dictionary_path => "/etc/logstash/translate/md5.yaml"
            destination => "[ti_tags_md5]"
            override => true
        }
        if ([ti_tags_md5] and [ti_tags_md5] != "" and [ti_tags_md5] != "-") {
            mutate {
                split => { "[ti_tags_md5]" => "|" }
            }
        }
    }
}





output {
#    stdout {
#       codec => rubydebug { metadata => true }
#    }
#if (event.file_size !=0 && ctx._source.file_size != event.file_size) { ctx._source.file_size = event.file_size }
    if [type] == "files" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"]
            index => "logstash-files"
            document_id => "%{[MD5]}"
            action => "update"
            doc_as_upsert => true
            script => '
                    ctx._source.last_seen = event.last_seen
                    if (event.file_size && event.file_size != 0 && ctx._source.file_size == 0) { ctx._source.file_size = event.file_size }
		    if (event.file_signer && !ctx._source.file_signer) { ctx._source.file_signer = event.file_signer }
		    if (event.mime_type && ctx._source.mime_type != event.mime_type) { ctx._source.mime_type = event.mime_type }
		    if (event.file_type && ctx._source.file_type != event.file_type) { ctx._source.file_type = event.file_type }
		    if (event.yara_check_date && ctx._source.yara_check_date != event.yara_check_date) { ctx._source.yara_check_date = event.yara_check_date }
                    ctx._source.processed_events += event.processed_events
		    ctx._source.execution_count += event.execution_count

		if (!ctx._source.yara_matches && event.yara_matches) {
		    ctx._source.yara_matches = event.yara_matches 
		}
                else if (event.yara_matches) {
                    event.yara_matches.each {
                        if (ctx._source.yara_matches.contains(it)) {}
                        else {
                            ctx._source.yara_matches += it
                        }
                    }
                }

		if (!ctx._source.ti_tags_md5 && event.ti_tags_md5) {
		    ctx._source.ti_tags_md5 = event.ti_tags_md5 
		}
                else if (event.ti_tags_md5) {
                    event.ti_tags_md5.each {
                        if (ctx._source.ti_tags_md5.contains(it)) {}
                        else {
                            ctx._source.ti_tags_md5 += it
                        }
                    }
                }

		event.computers.each {
                    if (ctx._source.computers.contains(it)) {}
                    else {
                        ctx._source.computers += it
                    }
                }

		event.users.each {
                    if (ctx._source.users.contains(it)) {}
                    else {
                        ctx._source.users += it
                    }
                }

                event.tags.each {
                    if (ctx._source.tags.contains(it)) {}
                    else {
                        ctx._source.tags += it
                    }
                }

                event.eventtypes.each {
                    if (ctx._source.eventtypes.contains(it)) {}
                    else {
                        ctx._source.eventtypes += it
                    }
                }
                
                event.file_pathes.each {
                    if (ctx._source.file_pathes.contains(it)) {}
                    else {
                        ctx._source.file_pathes += it
                    }
                }

                event.file_starters.each {
                    if (ctx._source.file_starters.contains(it)) {}
                    else {
                        ctx._source.file_starters += it
                    }
                }

		event.autorun_entrys.each {
                    if (ctx._source.autorun_entrys.contains(it)) {}
                    else {
                        ctx._source.autorun_entrys += it
                    }
                }

                event.mail_senders.each {
                    if (ctx._source.mail_senders.contains(it)) {}
                    else {
                        ctx._source.mail_senders += it
                    }
                }
		
		event.mail_recipients.each {
                    if (ctx._source.mail_recipients.contains(it)) {}
                    else {
                        ctx._source.mail_recipients += it
                    }
                }

		event.mail_subjects.each {
                    if (ctx._source.mail_subjects.contains(it)) {}
                    else {
                        ctx._source.mail_subjects += it
                    }
                }

		event.mail_attachments.each {
                    if (ctx._source.mail_attachments.contains(it)) {}
                    else {
                        ctx._source.mail_attachments += it
                    }
                }
            '
        }
    }
}
